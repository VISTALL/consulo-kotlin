package

A(value = {"1", "2", "3"}: kotlin.Array<out kotlin.String>, y = IntegerValueType(1): kotlin.Int) internal fun test1(): kotlin.Unit
A(value = {"4"}: kotlin.Array<out kotlin.String>, y = IntegerValueType(2): kotlin.Int) internal fun test2(): kotlin.Unit
A(value = {{"5", "6"}, "7"}: kotlin.Array<out kotlin.String>, y = IntegerValueType(3): kotlin.Int) internal fun test3(): kotlin.Unit
A(value = {"1", "2", "3"}: kotlin.Array<out kotlin.String>, x = kotlin.String::class: kotlin.reflect.KClass<*>, y = IntegerValueType(4): kotlin.Int) internal fun test4(): kotlin.Unit
A(value = {"4"}: kotlin.Array<out kotlin.String>, y = IntegerValueType(5): kotlin.Int) internal fun test5(): kotlin.Unit
A(value = {{"5", "6"}, "7"}: kotlin.Array<out kotlin.String>, x = kotlin.Any::class: kotlin.reflect.KClass<*>, y = IntegerValueType(6): kotlin.Int) internal fun test6(): kotlin.Unit
A(value = {}: kotlin.Array<out kotlin.String>, y = IntegerValueType(7): kotlin.Int) internal fun test7(): kotlin.Unit
A(value = {"8", "9", "10"}: kotlin.Array<out kotlin.String>) internal fun test8(): kotlin.Unit

public final annotation class A : kotlin.Annotation {
    public constructor A(/*0*/ vararg value: kotlin.String /*kotlin.Array<out kotlin.String>*/, /*1*/ x: kotlin.reflect.KClass<*> = ..., /*2*/ y: kotlin.Int)
    public final val value: kotlin.Array<kotlin.String>
    public final val x: kotlin.reflect.KClass<*>
    public final val y: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    public abstract fun value(): kotlin.Array<kotlin.String>
    public abstract fun x(): kotlin.reflect.KClass<*>
    public abstract fun y(): kotlin.Int
}
